# -*- coding: utf-8 -*-
"""LAB9_B20ME027.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12WiUaW-LzNe9CQS0vkGTtVj299NzUSx-
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.decomposition import PCA
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix,accuracy_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split

df=pd.read_csv('d.csv')

X=df.iloc[:,0:8]
Y=df.iloc[:,8]

LDA=LinearDiscriminantAnalysis(solver='svd',n_components=1)
X_lda_new=LDA.fit_transform(X,Y)

X_train_lda,X_test_lda,y_train_lda,y_test_lda=train_test_split(X_lda_new,Y,test_size=0.3)

pca=PCA(n_components=1)
X_pca_new=pca.fit_transform(X)
X_train_pca,X_test_pca,y_train_pca,y_test_pca=train_test_split(X_pca_new,Y,test_size=0.3)

KNN=KNeighborsClassifier(n_neighbors=5)
KNN.fit(X_train_lda,y_train_lda)
y_lda_new=KNN.predict(X_test_lda)

KNN.score(X_test_lda,y_test_lda)

KNN=KNeighborsClassifier(n_neighbors=5)
KNN.fit(X_train_pca,y_train_pca)
y_pca_new=KNN.predict(X_test_pca)

KNN.score(X_test_pca,y_test_pca)

confusion_matrix(y_test_lda,y_lda_new)

confusion_matrix(y_test_pca,y_pca_new)

new_X=np.insert(X_lda_new,1,Y,axis=1)
df1=pd.DataFrame(new_X,columns=['Reduced_lda','Output'])
pd.plotting.scatter_matrix(df1)

new_X1=np.insert(X_pca_new,1,Y,axis=1)
df2=pd.DataFrame(new_X,columns=['Reduced_pca','Output'])
pd.plotting.scatter_matrix(df2)

colors = ['red', 'blue']

for color, i, target_name in zip(colors, [0, 1], ['C1', 'C2']):
    plt.scatter(X_pca_new[Y == i, 0], X_pca_new[Y == i, 0], alpha=.8, color=color,
                label=target_name)
plt.legend(loc='best', shadow=False, scatterpoints=1)

plt.show()

colors = ['red', 'blue']

for color, i, target_name in zip(colors, [0, 1], ['C1', 'C2']):
    plt.scatter(X_lda_new[Y == i, 0], X_lda_new[Y == i, 0], alpha=.8, color=color,
                label=target_name)
plt.legend(loc='best', shadow=False, scatterpoints=1)

plt.show()

X_train,X_test,y_train,y_test=train_test_split(X,Y,test_size=0.3)

decision_tree=DecisionTreeClassifier()
decision_tree.fit(X_train,y_train)
out=decision_tree.predict(X_test)

decision_tree.score(X_test,y_test)

decision_tree.fit(X_train_lda,y_train_lda)
final=decision_tree.predict(X_test_lda)
decision_tree.score(X_test_lda,y_test_lda)

from sklearn.neural_network import MLPClassifier
perceptron=MLPClassifier(hidden_layer_sizes=(200,),activation='identity')
perceptron.fit(X_train_lda,y_train_lda)

perceptron.n_layers_

pred=perceptron.predict(X_test_lda)

accuracy_score(y_test_lda,pred)

from sklearn.neural_network import MLPClassifier
perceptron=MLPClassifier(hidden_layer_sizes=(300,),activation='identity')
perceptron.fit(X_train_lda,y_train_lda)
pred1=perceptron.predict(X_test_lda)

perceptron.n_layers_

accuracy_score(y_test_lda,pred1)

from sklearn.neural_network import MLPClassifier
perceptron=MLPClassifier(hidden_layer_sizes=(1000,),activation='identity')
perceptron.fit(X_train_lda,y_train_lda)
pred2=perceptron.predict(X_test_lda)

accuracy_score(y_test_lda,pred2)

perceptron.n_layers_